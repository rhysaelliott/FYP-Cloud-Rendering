#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(r8, binding = 0) uniform writeonly image3D densityTex;

layout(set=0, binding=1) uniform sampler3D shapeNoiseTex;
layout(set=0, binding=2) uniform sampler3D detailNoiseTex;

layout(binding=3) uniform VoxelGenInfo
{
    vec4 shapeNoiseWeights;
    vec4 detailNoiseWeights;

    float densityMultiplier;
    float detailNoiseMultiplier;
    float detailNoiseScale;
    float heightMapFactor;

    float cloudSpeed;
    float detailSpeed;
    float time;
    int reprojection;
} voxelGenInfo;

layout( push_constant ) uniform constants
{
 vec4 data1;
 vec4 data2;
 vec4 data3;
 ivec4 data4;
} PushConstants;

float beer(float d)
{
   return exp(-d);
}

float heightMap(float h)
{
    return  mix(1,(1 - beer(1 * h)) * beer(4 * h), voxelGenInfo.heightMapFactor);
}


void main() 
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz) + PushConstants.data4.xyz;
    vec3 nPos = vec3(pos) / vec3(imageSize(densityTex));


    vec2 prevUV = nPos.xz; 

   
    float density =0.0;
    float height = nPos.y;

    vec3 edgeProximity = min(nPos, vec3(1.0) - nPos);
    float edgeDistance = min(min(edgeProximity.x, edgeProximity.z),edgeProximity.y);

    vec3 shapeOffset = vec3(voxelGenInfo.time * voxelGenInfo.cloudSpeed);
    vec3 shapePos = nPos + shapeOffset;

    vec3 noiseOffset = vec3(voxelGenInfo.time * voxelGenInfo.detailSpeed);
    vec3 noisePos = nPos * voxelGenInfo.detailNoiseScale + noiseOffset;

    vec4 shapeNoise =texture(shapeNoiseTex, shapePos) ;
    vec4 detailNoise =texture(detailNoiseTex, noisePos) ;

    float h = heightMap(height);



    float fbm = dot(shapeNoise, voxelGenInfo.shapeNoiseWeights) * h;
    float detailFbm = dot(detailNoise, voxelGenInfo.detailNoiseWeights) * (1.0-h);

    float cloudDensity =fbm;
    if(cloudDensity<=0.01)
    {
        imageStore(densityTex, pos, vec4(density,0,0,0));
    }
    else
    {
        float invFbm = 1.0 - fbm;
        density = cloudDensity - detailFbm * invFbm * invFbm * invFbm * voxelGenInfo.detailNoiseMultiplier;
        density *= density;

        density*= edgeDistance;


        density*=voxelGenInfo.densityMultiplier;

        imageStore(densityTex, pos, vec4(density,0,0,0));
    }

}

