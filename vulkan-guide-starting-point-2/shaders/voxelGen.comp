#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(r8, binding = 0) uniform image3D densityTex;

layout(set=0, binding=1) uniform sampler3D shapeNoiseTex;
layout(set=0, binding=2) uniform sampler3D detailNoiseTex;

layout(binding=3) uniform VoxelGenInfo
{
    vec4 shapeNoiseWeights;
    vec4 detailNoiseWeights;

    float densityMultiplier;
    float detailNoiseMultiplier;
    float detailNoiseScale;
    float heightMapFactor;

    float cloudSpeed;
    float detailSpeed;
    float time;
    int reprojection;
} voxelGenInfo;

float beer(float d)
{
   return exp(-d);
}

float heightMap(float h)
{
    return  mix(1,(1 - beer(1 * h)) * beer(4 * h), voxelGenInfo.heightMapFactor);
}


void main() 
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    
    //todo if nPos is to be updated this frame, do full calculation. if not, get previous and store

    float density =0.0;

   // if((pos.x+pos.y+pos.z)%1 != voxelGenInfo.reprojection)
   // {
    //    density = imageLoad(densityTex, pos).r;
    //}
   // else
   // {
    vec3 nPos = vec3(pos) / vec3(imageSize(densityTex));
    float height = nPos.y;

    vec3 edgeProximity = min(nPos, vec3(1.0) - nPos);
    float edgeDistance = min(min(edgeProximity.x, edgeProximity.y), edgeProximity.z);

    vec3 shapePos = nPos *voxelGenInfo.time *voxelGenInfo.cloudSpeed;
    vec3 noisePos = nPos* voxelGenInfo.time * voxelGenInfo.detailNoiseScale * voxelGenInfo.detailSpeed;

    vec4 shapeNoise =texture(shapeNoiseTex, shapePos) ;
    vec4 detailNoise =texture(detailNoiseTex, noisePos) ;


    float fbm = dot(shapeNoise, voxelGenInfo.shapeNoiseWeights) * edgeDistance * heightMap(height);
    float detailFbm = dot(detailNoise, voxelGenInfo.detailNoiseWeights) * (1.0-height);

    float cloudDensity =fbm ;

    density = cloudDensity - detailFbm * pow(1-fbm,3) * voxelGenInfo.detailNoiseMultiplier;

    density*=voxelGenInfo.densityMultiplier;
    
    imageStore(densityTex, pos, vec4(density,0,0,0));
   // }


}

